openapi: 3.0.0
info:
  title: Auth API
  version: 1.0.0
servers :
  - url: http://localhost:5000/v1
paths:


  /users/:
    # Интерфейс управления пользователями.
    # Доступен администратору.
    get:
      summary: Получение списка пользователей
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный ответ со списком пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - email
                    - role
                  properties:
                    user_id:
                      type: string
                      format: uuid
                    email:
                      type: string
                      format: email
                      example: bob@example.com
                    created:
                      type: string
                      format: date-time
                    modified:
                      type: string
                      format: date-time
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'

  /users/{user_id}/:
    get:
      summary: Получение информации о пользователе
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Возвращаются данные пользователя.
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - roles
                  - sessions
                  - history
                properties:
                  email:
                    type: string
                    format: email
                    example: bob@example.com
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                          enum:
                            - regular
                            - premium
                            - manager
                  sessions:
                    type: integer
                    example: 4
                    description: Количество активных сессий пользователя.
                      Равно по количеству refresh-токенов.
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date-time
                        action:
                          type: string
                          enum:
                            - 'login'
                            - 'logout'
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь не найден
        
    patch:
      summary: Изменение данных пользователя
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: bob@example.com
                password:
                  type: string
                  format: password
                  example: password1234
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное обновление данных
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь не найден
    delete:
      summary: Удаление аккаунта пользователя
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: NO_CONTENT. Аккаунт пользователя успешно удален
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь не найден


  /users/{user_id}/roles/:
    get:
      summary: Получение списка ролей пользователя
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Вывод списка ролей пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                      enum:
                        - regular
                        - premium
                        - manager
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь не найден

  /users/{user_id}/roles/{role_id}/:
    put:
      summary: Назначение пользователю роли
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
        - in: path
          required: true
          name: role_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Роль добавлена
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь не найден

    delete:
      summary: Снятие роли у пользователя
      tags:
        - users
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: string
            format: uuid
        - in: path
          required: true
          name: role_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: NO_CONTENT. Роль успешно снята
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Пользователь или роль не найдены


  /sessions/:
    # Интерфейсы, связанные с сессией пользователя на сайте.
    # Методы доступны любому авторизованному пользователю.
    get:
      summary: Проверка JWT-токена
      description: При необходимости аутентификации пользователя прикладной
        сервис делает этот запрос с указанием JWT-токена в заголовке.
      tags:
        - sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: JWT-токен валиден. Возвращаются данные пользователя.
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - user-agent
                  - user-ip
                  - roles
                properties:
                  email:
                    type: string
                    format: email
                    example: bob@example.com
                  user-agent:
                    type: string
                    example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/111.0
                  user-ip:
                    type: string
                    example: 127.0.0.1
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                          enum:
                            - regular
                            - premium
                            - manager
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '404':
          description: NOT_FOUND. Пользователь не найден

    post:
      summary: Вход пользователя в систему, получение токенов
      description: Проверка пароля и выдача access и refresh токенов.
        Значения полей user-agent и user-ip сохраняются в auth-history,
        а также записываются в access токен, где их может использовать 
        прикладной сервис для дополнительной проверки запроса.
        Доступно всем.
      tags:
        - sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: bob@example.com
                password:
                  type: string
                user-agent:
                  type: string
                user-ip:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный вход в систему
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
        '403':
          description: FORBIDDEN. Неверный пароль

    delete:
      summary: Осуществление выхода пользователя
      description: Удаляет refresh токен, ассоциированный с полученным access-токеном.
      tags:
        - sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход
        '401':
          $ref: "#/components/responses/JwtRequiredError"

    put:
      summary: Обновление access и refresh токенов
      description: Обновляет access и refresh токены. 
        Срок жизни refresh отодвигается, если пользователь пользуется сервисом.
        А если не заходил n дней, то тогда пользователь заново проходит авторизацию.
      tags:
        - sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
                  description: refresh токен
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное обновление токенов
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
        '401':
          $ref: "#/components/responses/JwtRequiredError"
        '403':
          description: FORBIDDEN. refresh токен не найден

  /sessions/all/:
    delete:
      summary: Осуществление выхода пользователя на всех устройствах
      description: Удаляет все refresh токены, ассоциированные с пользователем.
      tags:
        - sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход
        '401':
          $ref: '#/components/responses/JwtRequiredError'

  /roles/:
    # Интерфейс управления списком ролей. Доступен администратору.
    get:
      summary: Получение полного списка ролей
      tags:
        - roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
        '401':
          $ref: '#/components/responses/JwtRequiredError'
        '403':
          $ref: '#/components/responses/AdminRequiredError'

    post:
      summary: Создание роли
      tags:
        - roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
        '401':
          $ref: '#/components/responses/JwtRequiredError'
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '409':
          description: CONFLICT. Роль уже существует

  /roles/{role_id}/:
    put:
      summary: Переименование роли
      tags:
        - roles
      parameters:
        - in: path
          required: true
          name: role_id
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: NO_CONTENT. Роль переименована
        '401':
          $ref: '#/components/responses/JwtRequiredError'
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Роль не найдена
        '409':
          description: CONFLICT. Роль уже существует
    delete:
      summary: Удаление роли
      description: При удалении роль снимается у всех пользователей.
      tags:
        - roles
      parameters:
        - in: path
          required: true
          name: role_id
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: NO_CONTENT. Роль удалена
        '401':
          $ref: '#/components/responses/JwtRequiredError'
        '403':
          $ref: '#/components/responses/AdminRequiredError'
        '404':
          description: NOT_FOUND. Роль не найдена

  /accounts/:
    # Интерфейс управления своим аккаунтом для пользователя
    get:
      summary: Получение информации об истории входов и прочее
      tags:
        - account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные об аккаунте
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - sessions
                  - history
                properties:
                  email:
                    type: string
                    format: email
                    example: bob@example.com
                  sessions:
                    type: integer
                    description: Количество активных сессий пользователя.
                      Равно по количеству refresh-токенов.
                    example: 4
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date-time
                        action:
                          type: string
                          enum:
                            - 'login'
                            - 'logout'
        '401':
          $ref: '#/components/responses/JwtRequiredError'

    post:
      summary: Регистрация нового пользователя
      description: В базе данных создается запись о новом пользователе.
        Вход в систему не производится, для входа надо отдельно вызвать POST /tokens/.
        Доступно всем.
      tags:
        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: bob@example.com
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                    example: username
                  email:
                    type: string
                    format: email
                    example: email@example.com
        '409':
          description: CONFLICT. Пользователь с этим e-mail уже зарегистрирован

    patch:
      summary: Изменение данных пользователя
      tags:
        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: bob@example.com
                password:
                  type: string
                  example: qwerty
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное обновление данных
        '409':
          description: CONFLICT. Данные не были изменены
        '401':
          $ref: '#/components/responses/JwtRequiredError'

    delete:
      summary: Удаление аккаунта пользователя
      tags:
        - account
      security:
        - bearerAuth: []
      responses:
        '204':
          description: NO_CONTENT. Аккаунт пользователя успешно удален
        '401':
          $ref: '#/components/responses/JwtRequiredError'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: Missing Authorization Header

  responses:
    JwtRequiredError:
      description: UNAUTHORIZED. Требуется аутентификация
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            - message: Missing Authorization Header

    AdminRequiredError:
      description: FORBIDDEN. Действие разрешено только администратору
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            - message: Действие разрешено только администратору