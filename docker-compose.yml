version: '3'
services:
#  postgres:
#    image: postgres:14.4
#    env_file:
#      - .env
#      - .env.docker
#    expose:
#      - "5432"
#    volumes:
#      - postgres_volume:/var/lib/postgresql/data
#      - ./postgres/movies_database.sql:/var/lib/postgresql/movies_database.sql:ro
#    healthcheck:
#      test: pg_isready -q --dbname=${POSTGRES_DB} --username=${POSTGRES_USER}
#      interval: 2s
#      timeout: 2s
#      retries: 5
#
#  elastic:
#    image: elasticsearch:7.17.8
#    env_file:
#      - .env
#      - .env.docker
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms500m -Xmx500m
#      - xpack.security.enabled=false
#    expose:
#      - "9200"
#    volumes:
#      - elastic_volume:/usr/share/elasticsearch/data
#    depends_on:
#      postgres:
#        condition: service_healthy
#    restart: on-failure
#    healthcheck:
#      test:
#        [
#          "CMD-SHELL",
#          "curl -s -I http://127.0.0.1:9200 | grep -q -E 'HTTP/1.1 200|HTTP/1.1 404'"
#        ]
#      interval: 1s
#      timeout: 5s
#      retries: 50
#
#  etl:
#    build:
#      context: .
#      dockerfile: ./etl/Dockerfile
#    env_file:
#      - .env
#      - .env.docker
#    volumes:
#      - etl_volume:/opt/etl
#    depends_on:
#      postgres:
#        condition: service_healthy
#      elastic:
#        condition: service_healthy
#    restart: always
#
#  fastapi:
#    build:
#      context: .
#      dockerfile: ./fastapi/Dockerfile
#    env_file:
#      - .env
#      - .env.docker
#    expose:
#      - "8000"
#    volumes:
#      - etl_volume:/opt/etl
#    depends_on:
#      elastic:
#        condition: service_healthy
#    restart: always
#    healthcheck:
#      test: curl -s http://localhost:8000/api/v1/films/ | grep -q -E 'detail|uuid'
#      interval: 1s
#      timeout: 5s
#      retries: 50
#
#  redis:
#    image: redis:6
#    env_file:
#      - .env
#      - .env.docker
#    expose:
#      - "6379"
#    volumes:
#      - redis_volume:/data
#    restart: always
#
#  nginx:
#    image: nginx:latest
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/sites.conf:/etc/nginx/conf.d/default.conf:ro
#    depends_on:
#      fastapi:
#        condition: service_healthy
#    ports:
#      - "80:80"

  auth_postgres:
    image: postgres:14.4
    environment:
          - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
          - POSTGRES_USER=${AUTH_POSTGRES_USER}
          - POSTGRES_DB=${AUTH_POSTGRES_DB}
    expose:
      - "5432"
    volumes:
      - auth_postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -q --port=5432 --dbname=${AUTH_POSTGRES_DB} --username=${AUTH_POSTGRES_USER}
      interval: 2s
      timeout: 2s
      retries: 5

  auth_redis:
    image: redis:6
    env_file:
      - .env
      - .env.docker
    expose:
      - "63791"
    volumes:
      - auth_redis_volume:/data
    restart: always

  auth:
    build:
      context: .
      dockerfile: ./auth/Dockerfile
    env_file:
      - .env
      - .env.docker
    ports:
      - "5000:5000"
    depends_on:
      auth_postgres:
        condition: service_healthy
    restart: always

volumes:
  postgres_volume:
  elastic_volume:
  etl_volume:
  redis_volume:
  auth_postgres_volume:
  auth_redis_volume:
